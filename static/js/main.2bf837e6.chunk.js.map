{"version":3,"sources":["components/FeedbackOptions/FeedbackOption.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Statistic","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","leaveFeedback","setState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","FeedbackOption","keys","Statistics","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAiCeA,EA9BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAChC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACrB,wBACIC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJnC,SAMKA,GAHIA,OCcFI,EAnBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC5C,OACI,+BACI,qBAAIP,UAAU,OAAd,mBAA4BG,KAC5B,qBAAIH,UAAU,OAAd,sBAA+BI,KAC/B,qBAAIJ,UAAU,OAAd,kBAA2BK,KAC3B,qBAAIL,UAAU,OAAd,oBAA6BM,KAC7B,qBAAIN,UAAU,OAAd,gCAAyCO,EAAzC,WCKGC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,0BAASV,UAAU,UAAnB,UACI,6BAAKS,IACJC,MCGEC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAO,mBAAGZ,UAAU,UAAb,SAAwBY,KCiFpBC,E,4MA5EXC,MAAQ,CACJX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTU,cAAgB,SAAAjB,GACZ,EAAKkB,UAAS,SAAAF,GAAK,sBACdhB,EAASgB,EAAMhB,GAAU,O,EAyBlCmB,mBAAqB,WACjB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAC7B,SAACC,EAAKvB,GAAN,OAAiBuB,EAAMvB,IACvB,I,EAIRwB,gCAAkC,WAAO,IAC7BnB,EAAS,EAAKW,MAAdX,KACR,OAAOoB,KAAKC,MAAOrB,EAAO,EAAKc,qBAAwB,MAAQ,G,uDAGzD,IAAD,EAC0BQ,KAAKX,MAA5BX,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACvB,OACI,gCACI,cAAC,EAAD,CAASI,MAAM,wBAAf,SACI,cAACiB,EAAD,CAII/B,QAASuB,OAAOS,KAAKF,KAAKX,OAC1BlB,gBAAiB6B,KAAKV,kBAG9B,cAAC,EAAD,CAASN,MAAM,aAAf,SACKgB,KAAKR,qBACF,cAACW,EAAD,CACIzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKR,qBACZV,mBAAoBkB,KAAKH,oCAG7B,cAAC,EAAD,CAAcV,QAAQ,+B,GArE5BiB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.2bf837e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return options.map(option => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn\"\r\n            key={option}\r\n            onClick={() => onLeaveFeedback(option)}\r\n        >\r\n            {option}\r\n        </button>\r\n    ));\r\n};\r\n// const FeedbackOptions = ({ onG, onN, onB }) => (\r\n//     <div>\r\n//         <button type=\"button\" onClick={onG}>\r\n//             Good\r\n//         </button>\r\n//         <button type=\"button\" onClick={onN}>\r\n//             Neutral\r\n//         </button>\r\n//         <button type=\"button\" onClick={onB}>\r\n//             Bad\r\n//         </button>\r\n//     </div>\r\n// );\r\n\r\nFeedbackOptions.propTypes = {\r\n    option: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <ul>\r\n            <li className=\"text\">Good: {good}</li>\r\n            <li className=\"text\">Neutral: {neutral}</li>\r\n            <li className=\"text\">Bad: {bad}</li>\r\n            <li className=\"text\">Total: {total}</li>\r\n            <li className=\"text\">Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nStatistic.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistic;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section className=\"section\">\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return <p className=\"message\">{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from 'react';\n\nimport FeedbackOptionals from '../FeedbackOptions/FeedbackOption';\nimport Statistics from '../Statistics/Statistics';\nimport Section from '../Section/Section';\nimport Notification from '../Notification/Notification';\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    leaveFeedback = option => {\n        this.setState(state => ({\n            [option]: state[option] + 1,\n        }));\n    };\n\n    // incrementGood = () => {\n    //     console.log('Кликнули в Good');\n    //     this.setState(prevState => {\n    //         return {\n    //             good: prevState.good + 1,\n    //         };\n    //     });\n    // };\n    // incrementNeutral = () => {\n    //     console.log('Кликнули в Neutral');\n    //     this.setState(prevState => ({\n    //         neutral: prevState.neutral + 1,\n    //     }));\n    // };\n    // incrementBad = () => {\n    //     console.log('Кликнули в Bad');\n    //     this.setState(prevState => ({\n    //         bad: prevState.bad + 1,\n    //     }));\n    // };\n\n    countTotalFeedback = () => {\n        return Object.values(this.state).reduce(\n            (acc, option) => acc + option,\n            0,\n        );\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        const { good } = this.state;\n        return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n    };\n\n    render() {\n        const { good, neutral, bad } = this.state;\n        return (\n            <div>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptionals\n                        // onG={this.incrementGood}\n                        // onN={this.incrementNeutral}\n                        // onB={this.incrementBad}\n                        options={Object.keys(this.state)}\n                        onLeaveFeedback={this.leaveFeedback}\n                    />\n                </Section>\n                <Section title=\"Statistics\">\n                    {this.countTotalFeedback() ? (\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={this.countTotalFeedback()}\n                            positivePercentage={this.countPositiveFeedbackPercentage()}\n                        />\n                    ) : (\n                        <Notification message=\"No feedback given\" />\n                    )}\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}